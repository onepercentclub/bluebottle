# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-08-27 15:06
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# bluebottle.analytics.migrations.0002_auto_20171031_1209

class Migration(migrations.Migration):

    replaces = [(b'analytics', '0001_initial'), (b'analytics', '0002_auto_20171031_1209'), (b'analytics', '0003_auto_20180210_1615'), (b'analytics', '0004_auto_20180404_1035'), (b'analytics', '0005_auto_20180424_1205')]

    dependencies = [
        ('projects', '0044_auto_20171110_1549'),
        ('geo', '0004_auto_20160929_0817'),
        ('clients', '0001_initial'),
        ('tasks', '0035_merge_20170831_1449'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsAdapter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(default=b'GoogleAnalytics', max_length=100)),
                ('code', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnalyticsPlatformSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='analyticsadapter',
            name='analytics_settings',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adapters', to='analytics.AnalyticsPlatformSettings'),
        ),
        migrations.RunSQL(
            sql="\nDROP VIEW IF EXISTS v_projects CASCADE;\nCREATE OR REPLACE VIEW v_projects AS (\nSELECT current_schema() as tenant,\n\t'project'::varchar as type,\n\tp.id as type_id,\n\tp.title as description,\n\tnull::integer as parent_id,\n\tnull::VARCHAR as parent_description,\n\tnull::INTEGER as grand_parent_id,\n\tnull::VARCHAR as grand_parent_description,\n\tp.campaign_ended AT TIME ZONE 'Europe/Amsterdam' as timestamp,\n\tpp.slug::varchar(20) as status,\n\tconcat(pp.id, ' - ', pp.name)::varchar(80) as status_friendly,\n\tpl.start AT TIME ZONE 'Europe/Amsterdam' as event_timestamp,\n\tplp.slug::varchar(20) as event_status,\n\tp.owner_id as user_id,\n\tm.email as user_email,\n\tm.remote_id as user_remote_id,\n\tEXTRACT(YEAR FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as year,\n\tEXTRACT(QUARTER FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as quarter,\n\tEXTRACT(MONTH FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as month,\n\tEXTRACT(WEEK FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as week,\n\tl.name as location, lg.name as location_group,\n\t1 as value,\n\tNULL::INTEGER as value_alt\nFROM projects_project as p\nLEFT JOIN projects_projectphaselog as pl\nON pl.project_id = p.id\nLEFT JOIN members_member as m\nON m.id = p.owner_id\nLEFT JOIN bb_projects_projectphase as plp\nON plp.id = pl.status_id\nLEFT JOIN bb_projects_projectphase as pp\nON pp.id = p.status_id\nLEFT JOIN geo_location as l\nON p.location_id = l.id\nLEFT JOIN geo_locationgroup as lg\nON l.group_id = lg.id);\n\nDROP VIEW IF EXISTS v_tasks CASCADE;\nCREATE OR REPLACE VIEW v_tasks AS (\nSELECT current_schema() as tenant,\n       'task'::varchar as type,\n\tt.id as type_id,\n\tt.title as description,\n\tt.project_id as parent_id,\n\tp.description as parent_description,\n\tnull::INTEGER as grand_parent_id,\n\tnull::VARCHAR as grand_parent_description,\n \tt.deadline AT TIME ZONE 'Europe/Amsterdam' as timestamp,\n\tt.status as status,\n\tinitcap(t.status)::varchar(80) as status_friendly,\n \ttl.start AT TIME ZONE 'Europe/Amsterdam' as event_timestamp,\n\ttl.status as event_status,\n\tauthor_id as user_id,\n\tm.email as user_email,\n\tm.remote_id as user_remote_id,\n\tEXTRACT(YEAR FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as year,\n\tEXTRACT(QUARTER FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as quarter,\n\tEXTRACT(MONTH FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as month,\n\tEXTRACT(WEEK FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as week,\n\tp.location as location,\n\tp.location_group as location_group,\n\t1 as value,\n\tt.time_needed::INTEGER as value_alt\nFROM tasks_task as t\nLEFT JOIN tasks_taskstatuslog as tl\nON tl.task_id = t.id\nLEFT JOIN v_projects as p\nON p.type_id = t.project_id\nLEFT JOIN members_member as m\nON m.id = t.author_id);\n\nDROP VIEW IF EXISTS v_taskmembers CASCADE;\nCREATE OR REPLACE VIEW v_taskmembers AS (\nSELECT current_schema() as tenant,\n       'taskmember_hours'::varchar as type,\n\ttm.id as type_id,\n\tt.description as description,\n\tt.type_id as parent_id,\n\tt.description as parent_description,\n\tt.parent_id as grand_parent_id,\n\tt.parent_description as grand_parent_description,\n\tt.timestamp AT TIME ZONE 'Europe/Amsterdam' as timestamp,\n\ttm.status as status,\n\tinitcap(tm.status)::varchar(80) as status_friendly,\n\ttml.start AT TIME ZONE 'Europe/Amsterdam' as event_timestamp,\n\ttml.status as event_status,\n\tmember_id as user_id,\n\tm.email as user_email,\n\tm.remote_id as user_remote_id,\n\tEXTRACT(YEAR FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as year,\n\tEXTRACT(QUARTER FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as quarter,\n\tEXTRACT(MONTH FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as month,\n\tEXTRACT(WEEK FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as week,\n\tt.location as location,\n\tt.location_group as location_group,\n\ttm.time_spent::integer as value,\n\tt.value_alt as value_alt\nFROM tasks_taskmember as tm\nLEFT JOIN tasks_taskmemberstatuslog as tml\nON tml.task_member_id = tm.id\nLEFT JOIN (\n\tSELECT DISTINCT ON (1) v_tasks.type_id as task_type_id, *\n\tFROM v_tasks) as t\nON t.task_type_id = tm.task_id\nLEFT JOIN members_member as m\nON m.id = tm.member_id);\n\n---\n---\n--- Views to filter the raw views by definitions of 'successful' per type\n---\n---\n\n-- Create report views on projects, tasks and task members\nDROP VIEW IF EXISTS v_project_successful_report CASCADE;\nCREATE OR REPLACE VIEW v_project_successful_report AS (\nSELECT DISTINCT on (1) type_id as filter_id, * FROM v_projects \nWHERE status = 'done-complete' AND event_status = 'done-complete'\nORDER BY filter_id, event_timestamp DESC);\n\n-- For tasks we don't consider the event logs\nDROP VIEW IF EXISTS v_task_successful_report CASCADE;\nCREATE OR REPLACE VIEW v_task_successful_report AS (\nSELECT DISTINCT on (1) type_id as filter_id, * FROM v_tasks \nWHERE status = 'realized'\nORDER BY filter_id, timestamp DESC);\n\n-- For task members we don't consider the event logs\nDROP VIEW IF EXISTS v_taskmember_successful_report CASCADE;\nCREATE OR REPLACE VIEW v_taskmember_successful_report AS (\nSELECT DISTINCT on (1) type_id as filter_id, * FROM v_taskmembers \nWHERE status = 'realized' AND value > 0\nORDER BY filter_id, timestamp DESC);\n\n---\n---\n--- Standard Reports\n---\n---\n\n-- Generate monthly 'success' report per project location\nDROP VIEW IF EXISTS v_month_report CASCADE;\nCREATE OR REPLACE VIEW v_month_report as (\nSELECT * FROM (\nSELECT year, quarter, month, location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, 'taskmember_volunteers'::varchar as type, count(user_id) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type) as m\nORDER BY m.year, m.quarter, m.month, m.location, m.type);\n\n-- Generate quarterly 'success' report per project location\nDROP VIEW IF EXISTS v_quarter_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type) as q\nORDER BY q.year, q.quarter, q.location, q.type);\n\n-- Generate yearly 'success' report per project location\nDROP VIEW IF EXISTS v_year_report CASCADE;\nCREATE OR REPLACE VIEW v_year_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type) as y\nORDER BY y.year, y.location, y.type);\n\n-- Generate monthly 'success' report totals\nDROP VIEW IF EXISTS v_month_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_month_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type) as m\nORDER BY m.year, m.quarter, m.month, m.type);\n\n-- Generate quarterly 'success' report totals\nDROP VIEW IF EXISTS v_quarter_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type) as q\nORDER BY q.year, q.quarter, q.type);\n\n-- Generate yearly 'success' report totals\nDROP VIEW IF EXISTS v_year_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_year_totals_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type) as y\nORDER BY y.year, y.type);\n\n---\n---\n--- Cumulative Reports\n---\n---\n\n-- Generate cumulative monthly taskmembers report per project location\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1 \nDROP VIEW IF EXISTS v_month_cumulative_taskmembers_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_taskmembers_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 1::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 1::double precision as quarter, 2::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 1::double precision as quarter, 3::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 4::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 5::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 6::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 7::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 8::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 9::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 10::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 11::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 12::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11,12}'::int[])\nGROUP BY year, location, type) as m\nORDER BY m.year, m.quarter, m.location, m.month, m.type);\n\n-- Generate cumulative quarterly taskmembers report per project location\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1 \nDROP VIEW IF EXISTS v_quarter_cumulative_taskmembers_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_taskmembers_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3,4}'::int[])\nGROUP BY year, location, type) as m\nORDER BY m.year, m.location, m.quarter, m.type);\n\n-- Generate cumulative monthly taskmembers report totals\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1 \nDROP VIEW IF EXISTS v_month_cumulative_taskmember_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_taskmember_totals_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 1::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 1::double precision as quarter, 2::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 1::double precision as quarter, 3::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 4::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 5::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 6::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 7::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 8::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 9::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 10::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 11::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 12::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11,12}'::int[])\nGROUP BY year, type) as m\nORDER BY m.year, m.quarter, m.month, m.type);\n\n-- Generate cumulative quarterly taskmembers report totals\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1 \nDROP VIEW IF EXISTS v_quarter_cumulative_taskmember_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_taskmember_totals_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3,4}'::int[])\nGROUP BY year, type) as m\nORDER BY m.year, m.quarter, m.type);\n\n-- Generate cumulative monthly 'success' report per project location\nDROP VIEW IF EXISTS v_month_cumulative_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_report as (\nSELECT * FROM (\nSELECT year, quarter, month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT * FROM v_month_cumulative_taskmembers_report\nUNION\nSELECT year, quarter, month, location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type,\n       sum(sum(value)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type) as m\nORDER BY m.year, m.quarter, m.month, m.location, m.type);\n\n-- Generate cumulative quarterly 'success' report per project location\nDROP VIEW IF EXISTS v_quarter_cumulative_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT * FROM v_quarter_cumulative_taskmembers_report\nUNION\nSELECT year, quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type,\n       sum(sum(value)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type) as m\nORDER BY m.year, m.quarter, m.location, m.type);\n\n-- Generate cumulative yearly 'success' report per project location\nDROP VIEW IF EXISTS v_year_cumulative_report CASCADE;\nCREATE OR REPLACE VIEW v_year_cumulative_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type,\n       sum(sum(value)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type) as m\nORDER BY m.year, m.location, m.type);\n\n\n\n-- Generate cumulative monthly  'success' report totals\nDROP VIEW IF EXISTS v_month_cumulative_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT * FROM v_month_cumulative_taskmember_totals_report\nUNION\nSELECT year, quarter, month, ''::varchar as location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type,\n       sum(sum(value)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type) as m\nORDER BY m.year, m.quarter, m.month, m.type);\n\n-- Generate cumulative quarterly 'success' report totals\nDROP VIEW IF EXISTS v_quarter_cumulative_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT * FROM v_quarter_cumulative_taskmember_totals_report\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(sum(value)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type) as m\nORDER BY m.year, m.quarter, m.type);\n\n-- Generate cumulative yearly 'success' report totals\nDROP VIEW IF EXISTS v_year_cumulative_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_year_cumulative_totals_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(sum(value)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type) as m\nORDER BY m.year, m.type);\n",
            reverse_sql='',
        ),
        migrations.RunSQL(
            sql="\nDROP VIEW IF EXISTS v_projects CASCADE;\nCREATE OR REPLACE VIEW v_projects AS (\nSELECT current_schema() as tenant,\n\t'project'::varchar as type,\n\tp.id as type_id,\n\tp.title as description,\n\tnull::integer as parent_id,\n\tnull::VARCHAR as parent_description,\n\tnull::INTEGER as grand_parent_id,\n\tnull::VARCHAR as grand_parent_description,\n\tp.campaign_ended AT TIME ZONE 'Europe/Amsterdam' as timestamp,\n\tpp.slug::varchar(20) as status,\n\tconcat(pp.id, ' - ', pp.slug)::varchar(80) as status_friendly,\n\tpl.start AT TIME ZONE 'Europe/Amsterdam' as event_timestamp,\n\tplp.slug::varchar(20) as event_status,\n\tp.owner_id as user_id,\n\tm.email as user_email,\n\tm.remote_id as user_remote_id,\n\tEXTRACT(YEAR FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as year,\n\tEXTRACT(QUARTER FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as quarter,\n\tEXTRACT(MONTH FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as month,\n\tEXTRACT(WEEK FROM pl.start AT TIME ZONE 'Europe/Amsterdam') as week,\n\tl.name as location, lg.name as location_group,\n\t1 as value,\n\tNULL::INTEGER as value_alt\nFROM projects_project as p\nLEFT JOIN projects_projectphaselog as pl\nON pl.project_id = p.id\nLEFT JOIN members_member as m\nON m.id = p.owner_id\nLEFT JOIN bb_projects_projectphase as plp\nON plp.id = pl.status_id\nLEFT JOIN bb_projects_projectphase as pp\nON pp.id = p.status_id\nLEFT JOIN geo_location as l\nON p.location_id = l.id\nLEFT JOIN geo_locationgroup as lg\nON l.group_id = lg.id);\n\nDROP VIEW IF EXISTS v_tasks CASCADE;\nCREATE OR REPLACE VIEW v_tasks AS (\nSELECT current_schema() as tenant,\n       'task'::varchar as type,\n\tt.id as type_id,\n\tt.title as description,\n\tt.project_id as parent_id,\n\tp.description as parent_description,\n\tnull::INTEGER as grand_parent_id,\n\tnull::VARCHAR as grand_parent_description,\n \tt.deadline AT TIME ZONE 'Europe/Amsterdam' as timestamp,\n\tt.status as status,\n\tinitcap(t.status)::varchar(80) as status_friendly,\n \ttl.start AT TIME ZONE 'Europe/Amsterdam' as event_timestamp,\n\ttl.status as event_status,\n\tauthor_id as user_id,\n\tm.email as user_email,\n\tm.remote_id as user_remote_id,\n\tEXTRACT(YEAR FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as year,\n\tEXTRACT(QUARTER FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as quarter,\n\tEXTRACT(MONTH FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as month,\n\tEXTRACT(WEEK FROM t.deadline AT TIME ZONE 'Europe/Amsterdam') as week,\n\tp.location as location,\n\tp.location_group as location_group,\n\t1 as value,\n\tt.time_needed::INTEGER as value_alt\nFROM tasks_task as t\nLEFT JOIN tasks_taskstatuslog as tl\nON tl.task_id = t.id\nLEFT JOIN v_projects as p\nON p.type_id = t.project_id\nLEFT JOIN members_member as m\nON m.id = t.author_id);\n\nDROP VIEW IF EXISTS v_taskmembers CASCADE;\nCREATE OR REPLACE VIEW v_taskmembers AS (\nSELECT current_schema() as tenant,\n       'taskmember_hours'::varchar as type,\n\ttm.id as type_id,\n\tt.description as description,\n\tt.type_id as parent_id,\n\tt.description as parent_description,\n\tt.parent_id as grand_parent_id,\n\tt.parent_description as grand_parent_description,\n\tt.timestamp AT TIME ZONE 'Europe/Amsterdam' as timestamp,\n\ttm.status as status,\n\tinitcap(tm.status)::varchar(80) as status_friendly,\n\ttml.start AT TIME ZONE 'Europe/Amsterdam' as event_timestamp,\n\ttml.status as event_status,\n\tmember_id as user_id,\n\tm.email as user_email,\n\tm.remote_id as user_remote_id,\n\tEXTRACT(YEAR FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as year,\n\tEXTRACT(QUARTER FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as quarter,\n\tEXTRACT(MONTH FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as month,\n\tEXTRACT(WEEK FROM t.timestamp AT TIME ZONE 'Europe/Amsterdam') as week,\n\tt.location as location,\n\tt.location_group as location_group,\n\ttm.time_spent::integer as value,\n\tt.value_alt as value_alt\nFROM tasks_taskmember as tm\nLEFT JOIN tasks_taskmemberstatuslog as tml\nON tml.task_member_id = tm.id\nLEFT JOIN (\n\tSELECT DISTINCT ON (1) v_tasks.type_id as task_type_id, *\n\tFROM v_tasks) as t\nON t.task_type_id = tm.task_id\nLEFT JOIN members_member as m\nON m.id = tm.member_id);\n\n---\n---\n--- Views to filter the raw views by definitions of 'successful' per type\n---\n---\n\n-- Create report views on projects, tasks and task members\nDROP VIEW IF EXISTS v_project_successful_report CASCADE;\nCREATE OR REPLACE VIEW v_project_successful_report AS (\nSELECT DISTINCT on (1) type_id as filter_id, * FROM v_projects\nWHERE status = 'done-complete' AND event_status = 'done-complete'\nORDER BY filter_id, event_timestamp DESC);\n\n-- For tasks we don't consider the event logs\nDROP VIEW IF EXISTS v_task_successful_report CASCADE;\nCREATE OR REPLACE VIEW v_task_successful_report AS (\nSELECT DISTINCT on (1) type_id as filter_id, * FROM v_tasks\nWHERE status = 'realized'\nORDER BY filter_id, timestamp DESC);\n\n-- For task members we don't consider the event logs\nDROP VIEW IF EXISTS v_taskmember_successful_report CASCADE;\nCREATE OR REPLACE VIEW v_taskmember_successful_report AS (\nSELECT DISTINCT on (1) type_id as filter_id, * FROM v_taskmembers\nWHERE status = 'realized' AND value > 0\nORDER BY filter_id, timestamp DESC);\n\n---\n---\n--- Standard Reports\n---\n---\n\n-- Generate monthly 'success' report per project location\nDROP VIEW IF EXISTS v_month_report CASCADE;\nCREATE OR REPLACE VIEW v_month_report as (\nSELECT * FROM (\nSELECT year, quarter, month, location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, 'taskmember_volunteers'::varchar as type, count(user_id) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type) as m\nORDER BY m.year, m.quarter, m.month, m.location, m.type);\n\n-- Generate quarterly 'success' report per project location\nDROP VIEW IF EXISTS v_quarter_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type) as q\nORDER BY q.year, q.quarter, q.location, q.type);\n\n-- Generate yearly 'success' report per project location\nDROP VIEW IF EXISTS v_year_report CASCADE;\nCREATE OR REPLACE VIEW v_year_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type) as y\nORDER BY y.year, y.location, y.type);\n\n-- Generate monthly 'success' report totals\nDROP VIEW IF EXISTS v_month_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_month_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type) as m\nORDER BY m.year, m.quarter, m.month, m.type);\n\n-- Generate quarterly 'success' report totals\nDROP VIEW IF EXISTS v_quarter_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type) as q\nORDER BY q.year, q.quarter, q.type);\n\n-- Generate yearly 'success' report totals\nDROP VIEW IF EXISTS v_year_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_year_totals_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_project_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type, count(distinct(type_id)) as value\nFROM v_task_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type, count(distinct(user_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type, count(distinct(type_id)) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type, sum(value) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type) as y\nORDER BY y.year, y.type);\n\n---\n---\n--- Cumulative Reports\n---\n---\n\n-- Generate cumulative monthly taskmembers report per project location\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1\nDROP VIEW IF EXISTS v_month_cumulative_taskmembers_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_taskmembers_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 1::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 1::double precision as quarter, 2::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 1::double precision as quarter, 3::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 4::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 5::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 6::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 7::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 8::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 9::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 10::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 11::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 12::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11,12}'::int[])\nGROUP BY year, location, type) as m\nORDER BY m.year, m.quarter, m.location, m.month, m.type);\n\n-- Generate cumulative quarterly taskmembers report per project location\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1\nDROP VIEW IF EXISTS v_quarter_cumulative_taskmembers_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_taskmembers_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 2::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 3::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3}'::int[])\nGROUP BY year, location, type\nUNION\nSELECT year, 4::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY location, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3,4}'::int[])\nGROUP BY year, location, type) as m\nORDER BY m.year, m.location, m.quarter, m.type);\n\n-- Generate cumulative monthly taskmembers report totals\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1\nDROP VIEW IF EXISTS v_month_cumulative_taskmember_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_taskmember_totals_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 1::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 1::double precision as quarter, 2::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 1::double precision as quarter, 3::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 4::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 5::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 6::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 7::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 8::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 9::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 10::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 11::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 12::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE month = ANY('{1,2,3,4,5,6,7,8,9,10,11,12}'::int[])\nGROUP BY year, type) as m\nORDER BY m.year, m.quarter, m.month, m.type);\n\n-- Generate cumulative quarterly taskmembers report totals\n-- NOTE: needed because we can't easily do a cumulative query by unique user_id with Postgresql 9.1\nDROP VIEW IF EXISTS v_quarter_cumulative_taskmember_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_taskmember_totals_report as (\nSELECT * FROM (\nSELECT year, 1::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 2::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 3::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3}'::int[])\nGROUP BY year, type\nUNION\nSELECT year, 4::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report WHERE quarter = ANY('{1,2,3,4}'::int[])\nGROUP BY year, type) as m\nORDER BY m.year, m.quarter, m.type);\n\n-- Generate cumulative monthly 'success' report per project location\nDROP VIEW IF EXISTS v_month_cumulative_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_report as (\nSELECT * FROM (\nSELECT year, quarter, month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT * FROM v_month_cumulative_taskmembers_report\nUNION\nSELECT year, quarter, month, location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type\nUNION\nSELECT year, quarter, month, location, type,\n       sum(sum(value)) OVER (PARTITION BY year, location ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, location, type) as m\nORDER BY m.year, m.quarter, m.month, m.location, m.type);\n\n-- Generate cumulative quarterly 'success' report per project location\nDROP VIEW IF EXISTS v_quarter_cumulative_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT * FROM v_quarter_cumulative_taskmembers_report\nUNION\nSELECT year, quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type\nUNION\nSELECT year, quarter, 0::double precision as month, location, type,\n       sum(sum(value)) OVER (PARTITION BY year, location ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, location, type) as m\nORDER BY m.year, m.quarter, m.location, m.type);\n\n-- Generate cumulative yearly 'success' report per project location\nDROP VIEW IF EXISTS v_year_cumulative_report CASCADE;\nCREATE OR REPLACE VIEW v_year_cumulative_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, location, type,\n       sum(sum(value)) OVER (PARTITION BY year, location ORDER BY type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, location, type) as m\nORDER BY m.year, m.location, m.type);\n\n\n\n-- Generate cumulative monthly  'success' report totals\nDROP VIEW IF EXISTS v_month_cumulative_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_month_cumulative_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT * FROM v_month_cumulative_taskmember_totals_report\nUNION\nSELECT year, quarter, month, ''::varchar as location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type\nUNION\nSELECT year, quarter, month, ''::varchar as location, type,\n       sum(sum(value)) OVER (PARTITION BY year ORDER BY year, quarter, month, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, month, type) as m\nORDER BY m.year, m.quarter, m.month, m.type);\n\n-- Generate cumulative quarterly 'success' report totals\nDROP VIEW IF EXISTS v_quarter_cumulative_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_quarter_cumulative_totals_report as (\nSELECT * FROM (\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT * FROM v_quarter_cumulative_taskmember_totals_report\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type\nUNION\nSELECT year, quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(sum(value)) OVER (PARTITION BY year ORDER BY year, quarter, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, quarter, type) as m\nORDER BY m.year, m.quarter, m.type);\n\n-- Generate cumulative yearly 'success' report totals\nDROP VIEW IF EXISTS v_year_cumulative_totals_report CASCADE;\nCREATE OR REPLACE VIEW v_year_cumulative_totals_report as (\nSELECT * FROM (\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_project_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_task_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'member_volunteers'::varchar as type,\n       sum(count(distinct user_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, 'taskmember_volunteers'::varchar as type,\n       sum(count(distinct type_id)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type\nUNION\nSELECT year, 0::double precision as quarter, 0::double precision as month, ''::varchar as location, type,\n       sum(sum(value)) OVER (PARTITION BY year ORDER BY year, type ROWS UNBOUNDED PRECEDING) as value\nFROM v_taskmember_successful_report\nGROUP BY year, type) as m\nORDER BY m.year, m.type);\n",
            reverse_sql='',
        ),
        migrations.AlterModelOptions(
            name='analyticsplatformsettings',
            options={'verbose_name': 'analytics platform settings', 'verbose_name_plural': 'analytics platform settings'},
        ),
        migrations.AddField(
            model_name='analyticsplatformsettings',
            name='fiscal_month_offset',
            field=models.PositiveIntegerField(default=0, verbose_name='Fiscal year offset'),
        ),
    ]
