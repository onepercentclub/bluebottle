# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2017-01-18 10:02
from __future__ import unicode_literals

import adminsortable.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import fluent_contents.models.managers


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# bluebottle.cms.migrations.0005_auto_20161207_1512
# bluebottle.cms.migrations.0006_auto_20161207_1642
# bluebottle.cms.migrations.0007_auto_20161207_1709
# bluebottle.cms.migrations.0014_auto_20161216_1359

def add_translations(apps, schema_editor):
        ResultPage = apps.get_model('cms', 'ResultPage')
        ResultPageTranslation = apps.get_model('cms', 'ResultPageTranslation')

        for object in ResultPage.objects.all():
            ResultPageTranslation.objects.create(
                master_id=object.pk,
                language_code=settings.LANGUAGE_CODE,
                title=object.title,
                slug=object.slug,
                description=object.description
            )

def add_stats_translations(apps, schema_editor):
        Stat = apps.get_model('cms', 'Stat')
        StatTranslation = apps.get_model('cms', 'StatTranslation')

        for object in Stat.objects.all():
            StatTranslation.objects.create(
                master_id=object.pk,
                language_code=settings.LANGUAGE_CODE,
                title=object.title
            )


def add_quotes_translations(apps, schema_editor):
        Quote = apps.get_model('cms', 'Quote')
        QuoteTranslation = apps.get_model('cms', 'QuoteTranslation')

        for object in Quote.objects.all():
            QuoteTranslation.objects.create(
                master_id=object.pk,
                language_code=settings.LANGUAGE_CODE,
                quote=object.quote,
                name=object.name
            )


STATS = (
    ('people_involved', {'en': {'title': 'Supporters'}, 'nl': {'title': 'Supporters'}}),
    ('projects_realized', {'en': {'title': 'Projects realised'}, 'nl': {'title': 'Project gerealiseerd'}}),
    ('donated_total', {'en': {'title': 'Crowdfunded'}, 'nl': {'title': 'Gecrowdfund'}}),
    ('tasks_realized', {'en': {'title': 'Tasks'}, 'nl': {'title': 'Taken'}}),
    ('votes_cast', {'en': {'title': 'Votes cast'}, 'nl': {'title': 'Stemmen opgehaald'}})
)


PAGE = {
    'en': {
        'title': 'Let\'s do good together',
        'description': 'Our results for 2016',
        'slug': 'our-results-for-2016'
    },
    'nl': {
        'title': 'Samen maken we het verschil',
        'description': 'Onze resultaten van 2016',
        'slug': 'onze-resultaten-van-2016'
    }
}


def create_default_result_pages(apps, schema_editor):
    languages = [lang[0] for lang in properties.LANGUAGES]

    Placeholder = apps.get_model('fluent_contents', 'Placeholder')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ResultPage = apps.get_model('cms', 'ResultPage')
    StatsContent = apps.get_model('cms', 'StatsContent')
    Stats = apps.get_model('cms', 'Stats')
    Stat = apps.get_model('cms', 'Stat')
    ProjectsContent = apps.get_model('cms', 'ProjectsContent')
    Project = apps.get_model('projects', 'Project')
    Projects = apps.get_model('cms', 'Projects')
    ProjectImagesContent = apps.get_model('cms', 'ProjectImagesContent')
    ShareResultsContent = apps.get_model('cms', 'ShareResultsContent')
    ProjectsMapContent = apps.get_model('cms', 'ProjectsMapContent')
    SupporterTotalContent = apps.get_model('cms', 'SupporterTotalContent')

    # Create the page
    page = ResultPage.objects.create(
        start_date=datetime.date(2016, 1, 1),
        end_date=datetime.date(2017, 12, 31)
    )
    # And all the translations
    for language_code, attrs in PAGE.items():
        if language_code in languages:
            page.translations.create(
                language_code=language_code,
                **attrs
            )

    # Create the placeholder
    page_type = ContentType.objects.get_for_model(page)
    placeholder = Placeholder(
        parent_id=page.pk, parent_type_id=page_type.pk, slot='content', role='m'
    )
    placeholder.parent = page
    placeholder.save()

    # Create the stats list
    stats = Stats.objects.create()
    for type, translations in STATS:
        stat = Stat.objects.create(type=type, stats=stats)
        for language_code, attrs in translations.items():
            stat.translations.create(language_code=language_code, **attrs)

    # And the projects list
    projects = Projects.objects.create()
    start_time = datetime.datetime(
        *page.start_date.timetuple()[:6], tzinfo=timezone(settings.TIME_ZONE)
    )
    end_time = datetime.datetime(
        *page.end_date.timetuple()[:6], tzinfo=timezone(settings.TIME_ZONE)
    )

    for project in Project.objects.filter(
        status__slug='done-complete',
        campaign_ended__range=(start_time, end_time)
    )[:3]:
        projects.projects.add(project)

    # All the content
    all_content = {
        StatsContent: {
            'en': {
                'stats': stats,
                'sort_order': 1
            },
            'nl': {
                'stats': stats,
                'sort_order': 1
            }
        },
        ProjectsContent: {
            'en': {
                'sort_order': 2,
                'title': "Projects that make us proud",
                'sub_title': "These projects are making a difference",
                'projects': projects
            },
            'nl': {
                'sort_order': 2,
                'title': "Projecten waar we extra trots op zijn",
                'sub_title': "Deze projecten maken het verschil",
                'action_text': 'Start je eigen project',
                'projects': projects
            }
        },
        ProjectImagesContent: {
            'en': {
                'sort_order': 3,
                'description': "Join our community and start doing good by supporting a project.",
            },
            'nl': {
                'sort_order': 3,
                'description': "Doe mee met onze community en draag zelf ook bij aan een project",
                'action_text': "Bekijk de projecten|"
            }
        },
        ShareResultsContent: {
            'en': {
                'sort_order': 4,
                'title': "Inspire your network",
                "sub_title": "Share our results",
                'share_text': "With {people} people, we realised {tasks} tasks",
            },
            'nl': {
                'sort_order': 4,
                'title': "Inspireer je netwerk",
                'sub_title': "Deel de resultaten",
                'share_text': "Met {people} people, {tasks} taken voltooid",
            }
        },
        ProjectsMapContent: {
            'en': {
                'sort_order': 5,
                'title': 'We worked in these locations'
            },
            'nl': {
                'sort_order': 5,
                'title': 'We hebben op al deze locaties gewerkt'
            }
        },
        SupporterTotalContent: {
            'en': {
                'sort_order': 6,
                'title': 'A big thanks to all our supporters',
                'sub_title': 'Together we are changing the world!',
                'co_financer_title': 'Special thanks to our co-funders'
            },
            'nl': {
                'sort_order': 6,
                'title': 'Dank aan alle deelnemers!',
                'sub_title': 'Samen maken we een wereld van verschil',
                'co_financer_title': 'En in het special bedanken we onze co-financiers'
            }
        }
    }

    def create_content_block(cls, content):
        content_type = ContentType.objects.get_for_model(cls)
        for language_code, attrs in content.items():
            if language_code in languages:
                cls.objects.create_for_placeholder(
                    placeholder,
                    language_code=language_code,
                    polymorphic_ctype=content_type,  # This does not get set automatically in migrations
                    **attrs
                )

    # create all the content
    for cls, content in all_content.items():
        create_content_block(cls, content)


class Migration(migrations.Migration):

    replaces = [(b'cms', '0001_initial'), (b'cms', '0002_shareresultscontent'), (b'cms', '0002_auto_20161207_0918'), (b'cms', '0003_merge_20161207_1037'), (b'cms', '0004_resultpage_image'), (b'cms', '0005_auto_20161207_1512'), (b'cms', '0006_auto_20161207_1642'), (b'cms', '0007_auto_20161207_1709'), (b'cms', '0005_auto_20161208_1124'), (b'cms', '0006_auto_20161208_1159'), (b'cms', '0008_merge_20161212_1459'), (b'cms', '0004_projectsmapcontent'), (b'cms', '0007_merge_20161212_1501'), (b'cms', '0009_merge_20161213_1047'), (b'cms', '0010_auto_20161214_1429'), (b'cms', '0011_auto_20161214_1531'), (b'cms', '0012_auto_20161214_1618'), (b'cms', '0010_auto_20161214_1524'), (b'cms', '0013_merge_20161214_1637'), (b'cms', '0014_auto_20161216_1424'), (b'cms', '0014_auto_20161216_1359'), (b'cms', '0015_merge_20161219_0946'), (b'cms', '0016_auto_20161228_1420')]

    initial = True

    dependencies = [
        ('projects', '0015_auto_20161207_0900'),
        ('fluent_contents', '0001_initial'),
        ('surveys', '0031_question_display_theme'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectImagesContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('action_text', models.CharField(blank=True, default='Check out our projects', max_length=100, null=True)),
                ('action_link', models.CharField(blank=True, default=b'/projects', max_length=100, null=True)),
            ],
            options={
                'db_table': 'contentitem_cms_projectimagescontent',
                'verbose_name': 'Project Images',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projects', models.ManyToManyField(to=b'projects.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectsContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
                ('action_text', models.CharField(blank=True, default='Add your own project', max_length=100, null=True)),
                ('projects', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cms.Projects')),
                ('action_link', models.CharField(blank=True, default=b'/start-project', max_length=100, null=True)),
            ],
            options={
                'db_table': 'contentitem_cms_projectscontent',
                'verbose_name': 'Projects',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=63)),
                ('quote', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Quotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='QuotesContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
                ('quotes', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cms.Quotes')),
            ],
            options={
                'db_table': 'contentitem_cms_quotescontent',
                'verbose_name': 'Quotes',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ResultPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('slug', models.SlugField(max_length=200, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=b'', verbose_name='Header image')),
            ],
        ),
        migrations.CreateModel(
            name='Stat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[(b'manual', 'Manual input'), (b'people_involved', 'People involved'), (b'projects_realized', 'Projects realised'), (b'tasks_realized', 'Tasks realised'), (b'donated_total', 'Donated total'), (b'projects_online', 'Projects Online'), (b'votes_cast', 'Votes casts')], max_length=40)),
                ('title', models.CharField(max_length=63)),
                ('value', models.CharField(blank=True, help_text="Use this for 'manual' input or the override the calculated value.", max_length=63, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='StatsContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
                ('stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cms.Stats')),
            ],
            options={
                'db_table': 'contentitem_cms_statscontent',
                'verbose_name': 'Platform Statistics',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SurveyContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
                ('survey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='surveys.Survey')),
            ],
            options={
                'db_table': 'contentitem_cms_surveycontent',
                'verbose_name': 'Platform Results',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='stat',
            name='stats',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cms.Stats'),
        ),
        migrations.AddField(
            model_name='quote',
            name='quotes',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cms.Quotes'),
        ),
        migrations.CreateModel(
            name='ShareResultsContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
                ('share_text', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'contentitem_cms_shareresultscontent',
                'verbose_name': 'Share Results',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ResultPageTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('slug', models.SlugField(max_length=200, verbose_name='Slug')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='cms.ResultPage')),
            ],
            options={
                'verbose_name': 'result page Translation',
                'default_permissions': (),
                'db_table': 'cms_resultpage_translation',
                'managed': True,
                'db_tablespace': '',
            },
        ),
        migrations.RunPython(
            code=add_translations,
        ),
        migrations.RemoveField(
            model_name='resultpage',
            name='description',
        ),
        migrations.RemoveField(
            model_name='resultpage',
            name='slug',
        ),
        migrations.RemoveField(
            model_name='resultpage',
            name='title',
        ),
        migrations.AlterUniqueTogether(
            name='resultpagetranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.CreateModel(
            name='StatTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(max_length=63)),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='cms.Stat')),
            ],
            options={
                'verbose_name': 'stat Translation',
                'default_permissions': (),
                'db_table': 'cms_stat_translation',
                'managed': True,
                'db_tablespace': '',
            },
        ),
        migrations.RunPython(
            code=add_stats_translations
        ),
        migrations.RemoveField(
            model_name='stat',
            name='title',
        ),
        migrations.AlterUniqueTogether(
            name='stattranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.CreateModel(
            name='QuoteTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('name', models.CharField(max_length=30)),
                ('quote', models.CharField(max_length=60)),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='cms.Quote')),
            ],
            options={
                'verbose_name': 'quote Translation',
                'default_permissions': (),
                'db_table': 'cms_quote_translation',
                'managed': True,
                'db_tablespace': '',
            },
        ),
        migrations.RunPython(
            code=add_quotes_translations
        ),
        migrations.RemoveField(
            model_name='quote',
            name='name',
        ),
        migrations.RemoveField(
            model_name='quote',
            name='quote',
        ),
        migrations.AlterField(
            model_name='resultpagetranslation',
            name='description',
            field=models.CharField(blank=True, max_length=70, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='resultpagetranslation',
            name='slug',
            field=models.SlugField(max_length=40, verbose_name='Slug'),
        ),
        migrations.AlterField(
            model_name='resultpagetranslation',
            name='title',
            field=models.CharField(max_length=40, verbose_name='Title'),
        ),
        migrations.AlterUniqueTogether(
            name='quotetranslation',
            unique_together=set([('language_code', 'master')]),
        ),
        migrations.AlterModelOptions(
            name='stat',
            options={'ordering': ['sequence']},
        ),
        migrations.AddField(
            model_name='stat',
            name='sequence',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='share_text',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='stat',
            name='stats',
            field=adminsortable.fields.SortableForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cms.Stats'),
        ),
        migrations.CreateModel(
            name='ProjectsMapContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=40, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=70, null=True)),
            ],
            options={
                'db_table': 'contentitem_cms_projectsmapcontent',
                'verbose_name': 'Projects Map',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SupporterTotalContent',
            fields=[
                ('contentitem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='fluent_contents.ContentItem')),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('sub_title', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'contentitem_cms_supporterscontent',
                'verbose_name': 'Supporters',
            },
            bases=('fluent_contents.contentitem',),
            managers=[
                ('objects', fluent_contents.models.managers.ContentItemManager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='share_text',
            field=models.CharField(default=b'', help_text=b'{amount}, {projects}, {tasks}, {hours}, {votes}, {people} will be replaced by live statistics', max_length=100),
        ),
        migrations.AlterModelTable(
            name='supportertotalcontent',
            table='contentitem_cms_supportertotalcontent',
        ),
        migrations.AlterModelOptions(
            name='supportertotalcontent',
            options={'verbose_name': 'Supporter total'},
        ),
        migrations.AddField(
            model_name='supportertotalcontent',
            name='co_financer_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='share_text',
            field=models.CharField(default='', help_text=b'{amount}, {projects}, {tasks}, {hours}, {votes}, {people} will be replaced by live statistics', max_length=100),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='stat',
            name='type',
            field=models.CharField(choices=[(b'manual', 'Manual input'), (b'people_involved', 'People involved'), (b'projects_realized', 'Projects realised'), (b'tasks_realized', 'Tasks realised'), (b'donated_total', 'Donated total'), (b'amount_matched', 'Amount matched'), (b'projects_online', 'Projects Online'), (b'votes_cast', 'Votes casts')], max_length=40),
        ),
        migrations.AlterField(
            model_name='projectimagescontent',
            name='action_text',
            field=models.CharField(blank=True, default='Check out our projects', max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='projectimagescontent',
            name='description',
            field=models.TextField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='projectimagescontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='projectimagescontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='projectscontent',
            name='action_text',
            field=models.CharField(blank=True, default='Add your own project', max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='projectscontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='projectscontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='quotescontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='quotescontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='resultpagetranslation',
            name='description',
            field=models.CharField(blank=True, max_length=45, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='share_text',
            field=models.CharField(default=b'', help_text=b'{amount}, {projects}, {tasks}, {hours}, {votes}, {people} will be replaced by live statistics', max_length=50),
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='stat',
            name='type',
            field=models.CharField(choices=[(b'manual', 'Manual input'), (b'people_involved', 'People involved'), (b'projects_realized', 'Projects realised'), (b'tasks_realized', 'Tasks realised'), (b'donated_total', 'Donated total'), (b'amount_matched', 'Amount matched'), (b'projects_online', 'Projects Online'), (b'votes_cast', 'Votes casts')], max_length=25),
        ),
        migrations.AlterField(
            model_name='statscontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='statscontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='supportertotalcontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='supportertotalcontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='surveycontent',
            name='sub_title',
            field=models.CharField(blank=True, max_length=70, null=True),
        ),
        migrations.AlterField(
            model_name='surveycontent',
            name='title',
            field=models.CharField(blank=True, max_length=40, null=True),
        ),
        migrations.RunPython(
            code=create_default_result_pages
        ),
        migrations.AlterModelManagers(
            name='projectimagescontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='projectscontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='projectsmapcontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='quotescontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='shareresultscontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='statscontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='supportertotalcontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='surveycontent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('base_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='shareresultscontent',
            name='share_title',
            field=models.CharField(default=b'', max_length=100),
        ),
        migrations.AlterField(
            model_name='projectimagescontent',
            name='action_link',
            field=models.CharField(blank=True, default=b'/projects?status=campaign%2Cvoting ', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='projectscontent',
            name='action_text',
            field=models.CharField(blank=True, default='Start your own project', max_length=40, null=True),
        ),
        migrations.AlterField(
            model_name='shareresultscontent',
            name='share_text',
            field=models.CharField(default=b'', help_text=b'{amount}, {projects}, {tasks}, {hours}, {votes}, {people} will be replaced by live statistics', max_length=100),
        ),
        migrations.AlterField(
            model_name='stat',
            name='type',
            field=models.CharField(choices=[(b'manual', 'Manual input'), (b'people_involved', 'People involved'), (b'projects_realized', 'Projects realised'), (b'tasks_realized', 'Tasks realised'), (b'donated_total', 'Donated total'), (b'amount_matched', 'Amount matched'), (b'projects_online', 'Projects Online'), (b'votes_cast', 'Votes casts'), (b'time_spent', 'Time spent')], max_length=25),
        ),
    ]
