# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-12-12 14:40
from __future__ import unicode_literals
import datetime
from pytz import timezone

from django.db import migrations
from django.conf import settings

from bluebottle.clients import properties


STATS = (
    ('people_involved', {'en': {'title': 'Supporters'}, 'nl': {'title': 'Supporters'}}),
    ('projects_realized', {'en': {'title': 'Projects realised'}, 'nl': {'title': 'Project gerealiseerd'}}),
    ('donated_total', {'en': {'title': 'Crowdfunded'}, 'nl': {'title': 'Gecrowdfund'}}),
    ('tasks_realized', {'en': {'title': 'Tasks'}, 'nl': {'title': 'Taken'}}),
    ('votes_cast', {'en': {'title': 'Votes cast'}, 'nl': {'title': 'Stemmen opgehaald'}})
)


PAGE = {
    'en': {
        'title': 'Let\'s do good together',
        'description': 'Our results for 2016',
        'slug': 'our-results-for-2016'
    },
    'nl': {
        'title': 'Samen maken we het verschil',
        'description': 'Onze resultaten van 2016',
        'slug': 'onze-resultaten-van-2016'
    }
}


def create_default_result_pages(apps, schema_editor):
    languages = [lang[0] for lang in properties.LANGUAGES]

    Placeholder = apps.get_model('fluent_contents', 'Placeholder')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ResultPage = apps.get_model('cms', 'ResultPage')
    StatsContent = apps.get_model('cms', 'StatsContent')
    Stats = apps.get_model('cms', 'Stats')
    Stat = apps.get_model('cms', 'Stat')
    ProjectsContent = apps.get_model('cms', 'ProjectsContent')
    Project = apps.get_model('projects', 'Project')
    Projects = apps.get_model('cms', 'Projects')
    ProjectImagesContent = apps.get_model('cms', 'ProjectImagesContent')
    ShareResultsContent = apps.get_model('cms', 'ShareResultsContent')
    ProjectsMapContent = apps.get_model('cms', 'ProjectsMapContent')
    SupporterTotalContent = apps.get_model('cms', 'SupporterTotalContent')

    # Create the page
    page = ResultPage.objects.create(
        start_date=datetime.date(2016, 1, 1),
        end_date=datetime.date(2017, 12, 31)
    )
    # And all the translations
    for language_code, attrs in list(PAGE.items()):
        if language_code in languages:
            page.translations.create(
                language_code=language_code,
                **attrs
            )

    # Create the placeholder
    page_type = ContentType.objects.get_for_model(page)
    placeholder = Placeholder(
        parent_id=page.pk, parent_type_id=page_type.pk, slot='content', role='m'
    )
    placeholder.parent = page
    placeholder.save()

    # Create the stats list
    stats = Stats.objects.create()
    for type, translations in STATS:
        stat = Stat.objects.create(type=type, stats=stats)
        for language_code, attrs in list(translations.items()):
            stat.translations.create(language_code=language_code, **attrs)

    # And the projects list
    projects = Projects.objects.create()
    start_time = datetime.datetime(
        *page.start_date.timetuple()[:6], tzinfo=timezone(settings.TIME_ZONE)
    )
    end_time = datetime.datetime(
        *page.end_date.timetuple()[:6], tzinfo=timezone(settings.TIME_ZONE)
    )

    for project in Project.objects.filter(
        status__slug='done-complete',
        campaign_ended__range=(start_time, end_time)
    )[:3]:
        projects.projects.add(project)

    # All the content
    all_content = {
        StatsContent: {
            'en': {
                'stats': stats,
                'sort_order': 1
            },
            'nl': {
                'stats': stats,
                'sort_order': 1
            }
        },
        ProjectsContent: {
            'en': {
                'sort_order': 2,
                'title': "Projects that make us proud",
                'sub_title': "These projects are making a difference",
                'projects': projects
            },
            'nl': {
                'sort_order': 2,
                'title': "Projecten waar we extra trots op zijn",
                'sub_title': "Deze projecten maken het verschil",
                'action_text': 'Start je eigen project',
                'projects': projects
            }
        },
        ProjectImagesContent: {
            'en': {
                'sort_order': 3,
                'description': "Join our community and start doing good by supporting a project.",
            },
            'nl': {
                'sort_order': 3,
                'description': "Doe mee met onze community en draag zelf ook bij aan een project",
                'action_text': "Bekijk de projecten|"
            }
        },
        ShareResultsContent: {
            'en': {
                'sort_order': 4,
                'title': "Inspire your network",
                "sub_title": "Share our results",
                'share_text': "With {people} people, we realised {tasks} tasks",
            },
            'nl': {
                'sort_order': 4,
                'title': "Inspireer je netwerk",
                'sub_title': "Deel de resultaten",
                'share_text': "Met {people} people, {tasks} taken voltooid",
            }
        },
        ProjectsMapContent: {
            'en': {
                'sort_order': 5,
                'title': 'We worked in these locations'
            },
            'nl': {
                'sort_order': 5,
                'title': 'We hebben op al deze locaties gewerkt'
            }
        },
        SupporterTotalContent: {
            'en': {
                'sort_order': 6,
                'title': 'A big thanks to all our supporters',
                'sub_title': 'Together we are changing the world!',
                'co_financer_title': 'Special thanks to our co-funders'
            },
            'nl': {
                'sort_order': 6,
                'title': 'Dank aan alle deelnemers!',
                'sub_title': 'Samen maken we een wereld van verschil',
                'co_financer_title': 'En in het special bedanken we onze co-financiers'
            }
        }
    }

    def create_content_block(cls, content):
        content_type = ContentType.objects.get_for_model(cls)
        for language_code, attrs in list(content.items()):
            if language_code in languages:
                cls.objects.create_for_placeholder(
                    placeholder,
                    language_code=language_code,
                    polymorphic_ctype=content_type,  # This does not get set automatically in migrations
                    **attrs
                )

    # create all the content
    for cls, content in list(all_content.items()):
        create_content_block(cls, content)


class Migration(migrations.Migration):
    dependencies = [
        ('cms', '0013_merge_20161214_1637'),
    ]

    operations = [
        migrations.RunPython(create_default_result_pages)
    ]
