# Generated by Django 4.2.20 on 2025-10-27 13:25
from django.db import migrations, connection
from parler.utils.context import switch_language


def migrate_start_page(apps, schema_editor):
    Page = apps.get_model('pages', 'Page')
    PlatformPage = apps.get_model('pages', 'PlatformPage')
    Language = apps.get_model('utils', 'Language')
    SitePlatformSettings = apps.get_model('cms', 'SitePlatformSettings')
    SitePlatformSettingsTrans = apps.get_model('cms', 'SitePlatformSettingsTranslation')

    from fluent_contents.models import Placeholder, ContentItem

    slot = 'blog_contents'

    start_page, _ = PlatformPage.objects.get_or_create(slug='start')

    for lang in Language.objects.all():
        lang_code = lang.code
        settings, _ = SitePlatformSettings.objects.get_or_create()
        settings_trans = SitePlatformSettingsTrans.objects.filter(master_id=settings.id, language_code=lang_code).first()
        settings_fallback = SitePlatformSettingsTrans.objects.filter(master_id=settings.id, start_page__gt='').first()
        slug = 'start'
        if settings_fallback and settings_fallback.start_page:
            slug = settings_fallback.start_page
        if settings_trans and settings_trans.start_page:
            slug = settings_trans.start_page

        print(f"Language {lang_code}, using page '{slug}'")
        src_page = Page.objects.filter(language=lang_code, slug=slug).first()
        if not src_page:
            continue

        try:
            src_ph = Placeholder.objects.get_by_slot(src_page, slot)
        except Placeholder.DoesNotExist:
            continue

        start_page.set_current_language(lang_code)
        if not start_page.has_translation(lang_code):
            start_page.create_translation(lang_code)

        start_page.title = getattr(src_page, 'title', '') or start_page.safe_translation_getter('title', default='')
        start_page.save()

        try:
            dst_ph = Placeholder.objects.get_by_slot(start_page, slot)
        except Placeholder.DoesNotExist:
            dst_ph = Placeholder.objects.create_for_object(start_page, slot)

        items = (
            ContentItem.objects
            .filter(placeholder=src_ph)
            .order_by('sort_order', 'pk')
        )
        for item in items:
            new_item = item.copy_to_placeholder(dst_ph)
            new_item.language_code = lang_code
            new_item.save()


class Migration(migrations.Migration):

    dependencies = [
        ('pages', '0018_platformpage'),
    ]

    operations = [
        migrations.RunPython(
            migrate_start_page,
            migrations.RunPython.noop
        ),
    ]
