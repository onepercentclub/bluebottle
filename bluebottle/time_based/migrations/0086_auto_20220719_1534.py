# Generated by Django 2.2.24 on 2022-07-19 13:34

from django.db import migrations
from datetime import timedelta
from django.utils.timezone import get_current_timezone
from dateutil.relativedelta import relativedelta


tz = get_current_timezone()


def get_contribution_duration_period(contribution):
    if not contribution.start or not contribution.end:
        return contribution.contributor.activity.timebasedactivity.periodactivity.duration_period

    duration = contribution.end - contribution.start 

    if duration.days < 3:
        return 'days'
    elif duration.days < 8:
        return 'weeks'
    else:
        return 'months'


def create_slot(contribution, activity, PeriodActivitySlot):
    duration_period = get_contribution_duration_period(contribution)
    
    start = contribution.start.astimezone(tz).date()
    end = (start + relativedelta(**{duration_period: 1})) - timedelta(days=1)

    
    slot = PeriodActivitySlot(
        activity=activity,
        start=start,
        end=end
    )
    created = True
    slot.save(skip_triggers=True)
    return slot


def create_slots(apps, schema_editor):
    PeriodActivity = apps.get_model('time_based', 'PeriodActivity')
    PeriodActivitySlot = apps.get_model('time_based', 'PeriodActivitySlot')
    PeriodSlotParticipant = apps.get_model('time_based', 'PeriodSlotParticipant')
    BaseSlotParticipant = apps.get_model('time_based', 'BaseSlotParticipant')
    TimeContribution = apps.get_model('time_based', 'TimeContribution')

    ContentType = apps.get_model('contenttypes', 'ContentType')
    content_type = ContentType.objects.get_for_model(PeriodSlotParticipant)

    for activity in PeriodActivity.objects.exclude(
        duration_period='overall'
    ):
        print(activity.id)
        for contribution in TimeContribution.objects.filter(
            contributor__activity=activity,
            contribution_type='period'
        ).order_by('start'):

            created = False
            slot = PeriodActivitySlot.objects.filter(
                activity=activity, 
                start__lte=contribution.start.astimezone(tz).date(),
                end__gt=contribution.start.astimezone(tz).date()
            ).first()

            if not slot or len(PeriodSlotParticipant.objects.filter(
                slot=slot,
                participant=contribution.contributor.periodparticipant
            )):
                slot = create_slot(contribution, activity, PeriodActivitySlot)
                created = True

            """print(
                f'Slot: {slot.start} - {slot.end}. Contribution: {contribution.start} - {contribution.end} (created: {created})'
            )"""

            try:
                existing_slot = PeriodSlotParticipant.objects.get(
                    slot=slot,
                    participant=contribution.contributor.periodparticipant
                )
                import ipdb; ipdb.set_trace()
            except:
                pass


            base_slot_participant = BaseSlotParticipant(
                status='registered',
                polymorphic_ctype=content_type
            )
            base_slot_participant.save(skip_triggers=True)
            slot_participant = PeriodSlotParticipant(
                slot=slot,
                participant=contribution.contributor.periodparticipant,
                baseslotparticipant_ptr=base_slot_participant

            )
            slot_participant.save(skip_triggers=True)

            contribution.slot_participant = base_slot_participant
            contribution.save()





class Migration(migrations.Migration):

    dependencies = [
        ('time_based', '0085_auto_20220719_1159'),
    ]

    operations = [
        migrations.RunPython(create_slots, migrations.RunPython.noop)
    ]
