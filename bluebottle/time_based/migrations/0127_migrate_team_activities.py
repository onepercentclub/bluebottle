# Generated by Django 3.2.20 on 2024-06-27 09:35
from django.db import migrations
from django.db.models import ObjectDoesNotExist

import uuid

from django.utils.timezone import now


def migrate_team_activities(apps, schema_editor):
    ContentType = apps.get_model("contenttypes.ContentType")

    PeriodActivity = apps.get_model("time_based", "PeriodActivity")
    ScheduleActivity = apps.get_model("time_based", "ScheduleActivity")
    schedule_activity_ctype = ContentType.objects.get_for_model(ScheduleActivity)

    activities = PeriodActivity.objects.filter(
        team_activity="teams", duration_period="overall"
    )

    for activity in activities:
        schedule_activity = ScheduleActivity(
            timebasedactivity_ptr=activity.timebasedactivity_ptr,
            start=activity.start,
            deadline=activity.deadline,
            is_online=activity.is_online,
            location=activity.location,
            location_hint=activity.location_hint,
            duration=activity.duration,
            team_activity="teams",
            review=activity.review,
        )
        schedule_activity.save_base(raw=True)

    ScheduleActivity.objects.update(polymorphic_ctype=schedule_activity_ctype)


def migrate_team_participants(apps, schema_editor):
    ContentType = apps.get_model("contenttypes.ContentType")

    ScheduleActivity = apps.get_model("time_based", "ScheduleActivity")
    TeamScheduleRegistration = apps.get_model("time_based", "TeamScheduleRegistration")
    TeamScheduleSlot = apps.get_model("time_based", "TeamScheduleSlot")
    TeamScheduleParticipant = apps.get_model("time_based", "TeamScheduleParticipant")
    Team = apps.get_model("time_based", "Team")
    TeamMember = apps.get_model("time_based", "TeamMember")
    PeriodParticipant = apps.get_model("time_based", "PeriodParticipant")

    LegacyTeam = apps.get_model("activities", "Team")

    activities = ScheduleActivity.objects.filter(team_activity="teams")

    team_schedule_participant_ctype = ContentType.objects.get_for_model(
        TeamScheduleParticipant
    )
    team_schedule_registration_ctype = ContentType.objects.get_for_model(
        TeamScheduleRegistration
    )

    for activity in activities:
        legacy_teams = LegacyTeam.objects.filter(activity=activity)

        for legacy_team in legacy_teams:
            if not legacy_team.members.all():
                continue

            try:
                captain_contributor = legacy_team.members.filter(
                    user=legacy_team.owner
                ).first()

                if captain_contributor:
                    invite = (
                        captain_contributor.invite
                        or captain_contributor.accepted_invite
                    )
                    invite_code = invite.pk
                else:
                    # Captain is not a member. Use invite of the first member
                    invite = legacy_team.members.filter(invite__isnull=False).first()
                    if invite:
                        invite_code = invite.invite.pk
                    else:
                        invite_code = str(uuid.uuid4())
            except AttributeError:
                # No invite found: generate one
                invite_code = str(uuid.uuid4())

            registration = TeamScheduleRegistration.objects.create(
                status="accepted",
                user=legacy_team.owner,
                polymorphic_ctype=team_schedule_registration_ctype,
                activity=activity,
            )

            def get_team_status(legacy_team):
                status = legacy_team.status

                if legacy_team.activity.status in ("cancelled",):
                    return "cancelled"
                if legacy_team.status == "finished":
                    status = "succeeded"
                if legacy_team.status in ("new", "open"):
                    try:
                        if legacy_team.slot.start < now():
                            status = "succeeded"
                        else:
                            status = "scheduled"
                    except ObjectDoesNotExist:
                        member = legacy_team.members.first()
                        contribution = member.contributions.get()
                        if contribution.start < now():
                            status = "succeeded"
                        else:
                            status = "scheduled"

                return status

            team = Team.objects.create(
                user=legacy_team.owner,
                status=get_team_status(legacy_team),
                activity=activity,
                invite_code=invite_code,
                registration=registration,
            )

            team_slot_status_map = {
                "open": "scheduled",
            }
            try:
                slot = TeamScheduleSlot.objects.create(
                    start=legacy_team.slot.start,
                    duration=legacy_team.slot.duration,
                    status=team_slot_status_map.get(
                        legacy_team.slot.status, legacy_team.slot.status
                    ),
                    is_online=legacy_team.slot.is_online,
                    online_meeting_url=legacy_team.slot.online_meeting_url,
                    location=legacy_team.slot.location,
                    location_hint=legacy_team.slot.location_hint,
                    activity=activity,
                    team=team,
                )
            except ObjectDoesNotExist:
                # no slot found. Use the first team member's contribution to generate the slot
                member = legacy_team.members.first()
                contribution = member.contributions.get()

                slot = TeamScheduleSlot.objects.create(
                    start=contribution.start,
                    duration=contribution.timecontribution.value,
                    status="finished" if contribution.start < now() else "scheduled",
                    is_online=True,
                    online_meeting_url="",
                    location=None,
                    location_hint="",
                    activity=activity,
                    team=team,
                )

            def get_team_member_status(member, team):
                status = member.status
                if status in ("accepted", "new"):
                    status = "active"

                if team.status in ("removed", "withdrawn", "cancelled"):
                    status = team.status

                return status

            def get_team_participant_status(member):
                status = member.status
                if status == "active":
                    status = member.team.status

                return status

            for member in legacy_team.members.all():
                team_member = TeamMember.objects.create(
                    user=member.user,
                    status=get_team_member_status(member, team),
                    team=team,
                    invite_code=invite_code,
                )

                participant = TeamScheduleParticipant.objects.create(
                    user=member.user,
                    status=get_team_participant_status(team_member),
                    team_member=team_member,
                    slot=slot,
                    registration=(
                        registration if member.user == legacy_team.owner else None
                    ),
                    activity=activity,
                    polymorphic_ctype=team_schedule_participant_ctype,
                )

                def get_contribution_status(participant):
                    if participant.status == "succeeded":
                        return "succeeded"
                    if participant.status == "scheduled":
                        return "new"

                    return "failed"

                for contribution in member.contributions.all():
                    contribution.contributor = participant
                    contribution.status = get_contribution_status(participant)
                    contribution.save()

                member.delete()

    incorrect_participants = PeriodParticipant.objects.filter(
        activity__team_activity="teams",
    )
    print(incorrect_participants.delete())


class Migration(migrations.Migration):

    dependencies = [
        ("time_based", "0126_alter_teammember_user"),
    ]

    operations = [
        migrations.RunPython(migrate_team_activities, migrations.RunPython.noop),
        migrations.RunPython(migrate_team_participants, migrations.RunPython.noop),
    ]
