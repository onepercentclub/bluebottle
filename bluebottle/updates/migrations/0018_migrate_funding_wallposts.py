# Generated by Django 3.2.20 on 2023-08-18 10:12

from django.db import migrations, IntegrityError, transaction
from django.db.transaction import TransactionManagementError


def migrate_related_reactions(old_wallpost, new_update, update_model):
    for reaction in old_wallpost.reactions.all():
        update_model.objects.create(
            created=reaction.created,
            activity_id=new_update.activity_id,
            message=reaction.text,
            author=reaction.author,
            parent=new_update
        )


def migrate_funding_wallposts(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Funding = apps.get_model('funding', 'Funding')

    SystemWallpost = apps.get_model('wallposts', 'SystemWallpost')
    TextWallpost = apps.get_model('wallposts', 'TextWallpost')
    MediaWallpost = apps.get_model('wallposts', 'MediaWallpost')
    MediaWallpostPhoto = apps.get_model('wallposts', 'MediaWallpostPhoto')

    Update = apps.get_model('updates', 'Update')
    UpdateImage = apps.get_model('updates', 'UpdateImage')
    Image = apps.get_model('files', 'Image')
    Member = apps.get_model('members', 'Member')
    funding_content_type = ContentType.objects.get_for_model(Funding)

    fallback_author = Member.objects.filter(is_superuser=True).first()

    for wallpost in MediaWallpost.objects.filter(content_type=funding_content_type, deleted__isnull=True):
        check = Funding.objects.filter(id=wallpost.object_id).exists()
        if not check:
            continue

        try:
            update = Update.objects.create(
                created=wallpost.created,
                contribution_id=wallpost.donation_id,
                activity_id=wallpost.object_id,
                message=wallpost.text,
                video_url=wallpost.video_url,
                author=wallpost.author,
                notify=wallpost.email_followers
            )
            migrate_related_reactions(wallpost, update, Update)

            photos = MediaWallpostPhoto.objects.filter(mediawallpost_id=wallpost.pk, deleted__isnull=True)
            author = wallpost.author or fallback_author
            for photo in photos:
                try:
                    image = Image.objects.create(
                        file=photo.photo,
                        owner=author,
                        used=True
                    )
                    UpdateImage.objects.create(
                        image=image,
                        update=update
                    )
                    print(f'created image for update: {update.pk}')
                except FileNotFoundError:
                    continue
        except IntegrityError:
            continue

    for wallpost in TextWallpost.objects.filter(content_type=funding_content_type, deleted__isnull=True):
        try:
            update = Update.objects.create(
                created=wallpost.created,
                activity_id=wallpost.object_id,
                contribution_id=wallpost.donation_id,
                message=wallpost.text,
                author=wallpost.author,
                notify=wallpost.email_followers
            )
            migrate_related_reactions(wallpost, update, Update)
        except IntegrityError:
            pass

    for wallpost in SystemWallpost.objects.filter(content_type=funding_content_type):
        try:
            update = Update.objects.create(
                created=wallpost.created,
                activity_id=wallpost.object_id,
                contribution_id=wallpost.donation_id,
                message=wallpost.text,
                author=wallpost.author,
                notify=wallpost.email_followers
            )
            migrate_related_reactions(wallpost, update, Update)
        except IntegrityError:
            pass


class Migration(migrations.Migration):
    dependencies = [
        ('updates', '0017_auto_20240802_1459'),
    ]

    operations = [
        migrations.RunPython(migrate_funding_wallposts, migrations.RunPython.noop)
    ]
